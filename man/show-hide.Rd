% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/withSpinner.R
\name{showSpinner}
\alias{showSpinner}
\alias{hideSpinner}
\alias{show-hide}
\title{Show or hide a CSS spinner from the shiny server function}
\usage{
showSpinner(output_id, session = shiny::getDefaultReactiveDomain())

hideSpinner(output_id, session = shiny::getDefaultReactiveDomain())
}
\arguments{
\item{output_id}{The id used when creating the output element in the shiny
UI function.}

\item{session}{The shiny session used to interact with the output element.
The default (\code{shiny::getDefaultReactiveDomain()}) will work for simple
shiny apps, but you may need to specify the session argument for use in
shiny modules.}
}
\description{
Show or hide a CSS spinner from the shiny server function
}
\section{Functions}{
\itemize{
\item \code{showSpinner()}: 

\item \code{hideSpinner()}: 

}}
\examples{
if (interactive()) {

  library(shiny)
  library(reactable)
  library(magrittr)
  library(shinycssloaders)
  
  slow_cars <- function() {
    Sys.sleep(3)
    random_cars <- mtcars[sample(seq_len(nrow(mtcars)), size = 10), ]
    cbind(
      model = rownames(random_cars),
      data.frame(random_cars, row.names = NULL)
    )
  }
  
  ui <- fluidPage(
    titlePanel("Show/Hide Spinners"),
    mainPanel(
      width = 12,
      shinyjs::useShinyjs(),
      tabsetPanel(
        tabPanel(
          "Without Show/Hide",
          reactableOutput("tbl_orig", height = 600) \%>\% 
            withSpinner(type = 5),
          helpText(
            paste(
              "Shows a typical app setup where the table's render function",
              "includes a dependency on the button."
            ),
            "Click the 'Update' button to simulate a long-running calculation.",
            paste(
              "Each time you click the button the table is completely",
              "re-rendered, so filters/sorting are lost."
            )
          ),
          actionButton("update_orig", "Update")
        ),
        tabPanel(
          "In Code",
          reactableOutput("tbl_code", height = 600) \%>\% 
            withSpinner(type = 5),
          helpText(
            paste(
              "Shows how re-rendering can be avoided so that the table state is",
              "maintained, while still providing visual feedback via the spinner."
            ),
            "Click the 'Update' button to simulate a long-running calculation.",
            paste(
              "This version replaces the data in the table without re-rendering,",
              "but it requires showSpinner and hideSpinner."
            )
          ),
          actionButton("update_code", "Update")
        ),
        tabPanel(
          "Via Button",
          reactableOutput("tbl_manual", height = 600) \%>\% 
            withSpinner(type = 5),
          helpText(
            "Shows how other app elements can be used to invoke the spinners."
          ),
          actionButton("show", "Show Spinner"),
          actionButton("hide", "Hide Spinner")
        )
      )
    )
  )
  
  server <- function(input, output, session) {
    
    ##############################################################################
    
    # typical app
    # table re-renders completely when data changes
    # table state (filters, sorting) is lost on re-render
    
    output$tbl_orig <- renderReactable({
      input$update_orig
      slow_cars() \%>\% 
        reactable(filterable = TRUE, selection = "multiple")
    })
    
    ##############################################################################
    
    # using showSpinner/hideSpinner
    # table state (filters, sorting) is maintained by replacing data
    # without re-rendering
    
    output$tbl_code <- renderReactable({
      # no dependency, data changes in observeEvent
      slow_cars() \%>\% 
        reactable(filterable = TRUE, selection = "multiple")
    })
    
    observeEvent(input$update_code, {
      
      showSpinner("tbl_code")
      
      x <- slow_cars()
      
      updateReactable("tbl_code", data = x)
      
      hideSpinner("tbl_code")
      
    })
    
    ##############################################################################
    
    # using showSpinner/hideSpinner via buttons
    
    output$tbl_manual <- renderReactable({
      # no dependency, data never changes
      slow_cars() \%>\% 
        reactable(filterable = TRUE, selection = "multiple")
    })
    
    observeEvent(input$show, showSpinner("tbl_manual"))
    
    observeEvent(input$hide, hideSpinner("tbl_manual"))
    
  }
  
  # Run the application 
  shinyApp(ui = ui, server = server, options = list(display.mode = "showcase"))

}
}
